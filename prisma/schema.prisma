// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

// auth tables -----------------------------------------------------------------

// model VisitorUser {
//   id         Int         @id @default(autoincrement())
//   name       String?     @db.VarChar(70)
//   email      String      @unique @db.VarChar(255)
//   number     String?     @unique @db.VarChar(10)
//   createdAt  DateTime    @default(now())
//   updatedAt  DateTime    @updatedAt

// }

model StoreOwnerUser {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(70)
  email      String      @unique @db.VarChar(255)
  number     String      @unique @db.VarChar(10)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  stores     Store[]
  saveStores SaveStore[]
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  otp       Int
  createdAt DateTime @default(now())
}

model UserVerifiedEmail {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

// model VisitorVerifiedEmail {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   createdAt DateTime @default(now())
// }

// --------------------------------------------------------------------------------------

// store or shop tables ------------------------------------------------------------------
model Store {
  id                Int                @id @default(autoincrement())
  slug              String             @unique
  name              String             @db.VarChar(50)
  isOpen            Boolean            @default(true)
  tagline           String?            @db.VarChar(70)
  logo              String             @db.VarChar(255)
  number            String             @db.VarChar(10)
  whatsappNumber    String             @db.VarChar(10)
  email             String             @db.VarChar(255)
  categoryId        Int
  bio               String             @db.VarChar(255)
  feedbackLink      String?            @db.VarChar(255)
  upiId             String?            @db.VarChar(255)
  storeOwnerUserId  Int
  isActive          Boolean            @default(true)
  secret            String?
  storeOwnerUser    StoreOwnerUser     @relation(fields: [storeOwnerUserId], references: [id])
  category          Category           @relation(fields: [categoryId], references: [id])
  storeServices     StoreService[]
  storeAddresses    StoreAddress?
  storeSocialMedias StoreSocialMedia[]
  storePhotos       StorePhoto[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  saveStores        SaveStore[]
  // StoreProducts     StoreProduct[]
}

model SaveStore {
  id             Int            @id @default(autoincrement())
  userId         Int
  storeId        Int
  storeOwnerUser StoreOwnerUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  store          Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now())

  @@unique([userId, storeId])
}

model CategoryTitle {
  id         Int        @id @default(autoincrement())
  title      String     @unique @db.VarChar(50)
  index      Int
  categories Category[]
}

model Category {
  id              Int           @id @default(autoincrement())
  name            String        @unique @db.VarChar(50)
  icon            String        @default("none") @db.VarChar(255)
  categoryTitleId Int           @default(1)
  categoryTitle   CategoryTitle @relation(fields: [categoryTitleId], references: [id])
  stores          Store[]
  services        Service[]
}

model Service {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(50)
  categoryId    Int
  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  storeServices StoreService[]
}

model StoreService {
  id        Int     @id @default(autoincrement())
  storeId   Int
  serviceId Int
  index     Int
  store     Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model State {
  id             Int            @id @default(autoincrement())
  name           String         @db.VarChar(50)
  city           City[]
  storeAddresses StoreAddress[]
}

model City {
  id             Int            @id @default(autoincrement())
  name           String         @db.VarChar(50)
  stateId        Int
  state          State          @relation(fields: [stateId], references: [id], onDelete: Cascade)
  storeAddresses StoreAddress[]
}

model StoreAddress {
  id            Int                                   @id @default(autoincrement())
  storeId       Int                                   @unique
  store         Store                                 @relation(fields: [storeId], references: [id], onDelete: Cascade)
  addressLine1  String                                @db.VarChar(255) // shop number, building, near by/opposite
  addressLine2  String                                @db.VarChar(255) // main area, road
  stateId       Int
  cityId        Int
  state         State                                 @relation(fields: [stateId], references: [id])
  city          City                                  @relation(fields: [cityId], references: [id])
  pincode       Int
  googleMapLink String                                @db.VarChar(255)
  coordinates   Unsupported("geography(Point, 4326)") // Storing lat/lng as a Point
}

model SocialMedia {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(30)
  icon              String             @db.VarChar(255)
  storeSocialMedias StoreSocialMedia[]
}

model StoreSocialMedia {
  id            Int         @id @default(autoincrement())
  SocialMediaId Int
  storeId       Int
  link          String      @db.VarChar(255)
  index         Int
  store         Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  socialMedia   SocialMedia @relation(fields: [SocialMediaId], references: [id])
}

model StorePhoto {
  id      Int    @id @default(autoincrement())
  storeId Int
  path    String @db.VarChar(255)
  index   Int
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

// --------------------------------------------------------------------------------------

// product management -------------------------------------------------------------------

// model ProductCategory {
//   id            Int               @id @default(autoincrement())
//   name          String            @db.VarChar(100)
//   categoryId    Int? // Nullable for root categories
//   parent        ProductCategory?  @relation("CategoryToCategory", fields: [categoryId], references: [id])
//   subcategories ProductCategory[] @relation("CategoryToCategory")
//   products      Product[]
// }

// model Product {
//   id            Int             @id @default(autoincrement())
//   name          String          @db.VarChar(100)
//   categoryId    Int
//   category      ProductCategory @relation(fields: [categoryId], references: [id])
//   link          String
//   barcode       String
//   createdAt     DateTime        @default(now())
//   updatedAt     DateTime        @updatedAt
//   StoreProducts StoreProduct[]
// }

// model StoreProduct {
//   id        Int      @id @default(autoincrement())
//   storeId   Int
//   productId Int
//   quantity  Int
//   price     Int
//   updatedAt DateTime @updatedAt

//   store   Store   @relation(fields: [storeId], references: [id])
//   product Product @relation(fields: [productId], references: [id])
// }

// --------------------------------------------------------------------------------------
